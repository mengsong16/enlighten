# dataset
dataset_type: PointNav-v1 # for pointgoal dataset
split: val_mini  #[train, val, val_mini] # for pointgoal dataset
dataset_path: "/dataset/pointnav_gibson_v1/{split}/{split}.json.gz" # where pointgoal episode split data store
pointgoal_dataset_path: "/dataset/pointnav_gibson_v1"
content_scenes: ["*"]
scenes_dir: "/dataset"  # where mesh data store
behavior_dataset_path: "/dataset/behavior_dataset_gibson_mini" #"/dataset/behavior_dataset_gibson"  # where imitation learning dataset store

# experiments
experiment_name: "test"
log_to_wandb: false #true  # log

# dummy initial setup 
scene_id: /home/meng/habitat-sim/data/scene_datasets/habitat-test-scenes/van-gogh-room.glb
agent_initial_position: [3, 0, 1]
agent_initial_rotation: [0, 70, 0]
goal_position: [4, 0, -1]

# robot
forward_resolution: 0.25 # meter
rotate_resolution: 10 # degree
action_number: 4

# observation space (env)
state_sensor: true
color_sensor: true
depth_sensor: false #true
semantic_sensor: false
image_width: 224 #256
image_height: 224 #256 
normalize_depth: true # if true, scale depth to [0,1] according to min and max depth
min_depth: 0
max_depth: 10.0 
dictionary_observation_space: true

# task
measurements: ['steps', 'collisions', 'distance_to_goal', 'success', 'done', 'spl', 'softspl', 'point_goal_reward', 'return']

# state
state_coord_system: polar # [polar, cartesian]
state_dimension: 2 # [2, 3]
cos_augmented_state: false #false
state_relative_to_origin: true
state_only: false # only use state as input to the agent

# goal
goal_conditioned: true  # enable goal sensor
goal_format: pointgoal # imagegoal #pointgoal
goal_relative_to_origin: false
goal_gps_compass: true #true  # false use absolute goal location relative to the start location
goal_coord_system: polar # [polar, cartesian]
goal_dimension: 2 # [2, 3]
cos_augmented_goal: false #false

# reward
success_distance: 0.2 # l2 distance in meter
success_reward: 2.5 #100 #2.5 
slack_reward: -1.0e-4 #-1 #-1.0e-4 #-1.0e-2
goal_reward: true # false
stop_depend_success: true

# episode termination condition
max_steps_per_episode: 500
max_collisions_per_episode: 200

# seed
seed: 0

# gpu
gpu_id: 0 #1

# dt
K: 20 # context length
embed_dim: 128
n_layer: 3
n_head: 8
activation_function: 'relu'
dropout: 0.1
max_ep_len: 500 # 4096
goal_form:  "rel_goal" # ["rel_goal", "distance_to_goal", "abs_goal"]

# training
batch_size: 16
learning_rate: 1.0e-4
weight_decay: 1.0e-4
warmup_steps: 10000
max_iters: 30 #500 #30 #10
num_steps_per_iter: 100 #10000

# save checkpoint
save_every_iterations: 10 #50 #10 

# evaluation
num_eval_episodes: 100
eval_checkpoint_folder: "checkpoints"
eval_checkpoint_file: "ckpt.9.pth"
# use checkpoint config file
eval_use_ckpt_config: false
video_dir: "video"

test_episode_count: 50 #-1: test on all episodes in dataset
eval_metrics: ['success', 'spl', 'softspl', 'return']















