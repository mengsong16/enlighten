# for original pointgoal dataset
dataset_type: PointNav-v1 # for pointgoal dataset
split: val_mini  #[train, val, val_mini] # for pointgoal dataset
dataset_path: "/dataset/pointnav_gibson_v1/{split}/{split}.json.gz" # where pointgoal episode split data store
pointgoal_dataset_path: "/dataset/pointnav_gibson_v1"
content_scenes: ["*"]
scenes_dir: "/dataset"  # where mesh data store
# -----------------------------------------------
# BC training data location
behavior_dataset_path: "/dataset/behavior_dataset_gibson_1_scene_Rancocas_whole"  # where imitation learning dataset store


# experiments
algorithm_name: "rnn_bc_online"
experiment_name: "rnn_bc_online_1_scene_Rancocas_whole"

# dummy initial setup 
scene_id: /home/meng/habitat-sim/data/scene_datasets/habitat-test-scenes/van-gogh-room.glb
agent_initial_position: [3, 0, 1]
agent_initial_rotation: [0, 70, 0]
goal_position: [4, 0, -1]

# dummy for saving render images
eval_video_option: [] #["disk", "tensorboard"]

# robot
forward_resolution: 0.25 # meter
rotate_resolution: 10 # degree
action_number: 4

# observation space (env)
state_sensor: true
color_sensor: true
depth_sensor: false #true
semantic_sensor: false
image_width: 224 #256
image_height: 224 #256 
normalize_depth: true # if true, scale depth to [0,1] according to min and max depth
min_depth: 0
max_depth: 10.0 
dictionary_observation_space: true

# task
measurements: ['steps', 'collisions', 'distance_to_goal', 'success', 'done', 'spl', 'softspl', 'point_goal_reward', 'return']

# state
state_coord_system: polar # [polar, cartesian]
state_dimension: 2 # [2, 3]
cos_augmented_state: false #false
state_relative_to_origin: true
state_only: false # only use state as input to the agent

# goal
goal_conditioned: true  # enable goal sensor
goal_format: pointgoal # imagegoal #pointgoal
goal_relative_to_origin: false
goal_gps_compass: true #true  # false use absolute goal location relative to the start location
goal_coord_system: polar # [polar, cartesian]
goal_dimension: 2 # [2, 3]
cos_augmented_goal: false #false

# reward
success_distance: 0.2 # l2 distance in meter
success_reward: 2.5 #100 #2.5 
slack_reward: -1.0e-4 #-1 #-1.0e-4 #-1.0e-2
goal_reward: true # false
stop_depend_success: true

# episode termination condition (environment)
max_steps_per_episode: 500  # used as the longest evaluation steps
max_collisions_per_episode: 200

# seed
seed: 1

# gpu
gpu_id: 1 #1

# vector env (for evaluation and training)
# amount to the number of trajectories in a batch during training
num_environments: 14 #4 #8 #14 #4 #2
single_scene: false  # construct vec envs from a single scene or the dataset

# dummy observation transformations 
enabled_transforms: []

# rollout buffer
rollout_buffer_length: 250  # must larger than the longest demonstration in the dataset

# rnn
rnn_hidden_size: 512
obs_embedding_size: 512
goal_embedding_size: 32
act_embedding_size: 32
rnn_type: 'gru'

# more about env
goal_form:  "rel_goal"

# training
optimizer: "AdamW" #["AdamW", "Adam"]
learning_rate: 1.0e-4
weight_decay: 1.0e-4
total_updates: 1000000 # start to converge at 100000

# training log
verbose: true # false
log_interval: 25  # log stats every n training updates
tensorboard_dir: "tensorboard"

# save checkpoint
save_every_updates: 10000 #40 #50 #10 

# evaluation
eval_experiment_folder: "rnn_bc_online_1_scene_Rancocas_whole"
# if a list, need to ensure that checkpoint index is increasing
eval_checkpoint_file: ["ckpt.11.pth","ckpt.12.pth","ckpt.13.pth","ckpt.14.pth","ckpt.15.pth","ckpt.16.pth","ckpt.17.pth","ckpt.18.pth"] 
eval_dir: "evaluation"
test_episode_count: -1 # test all episodes in the dataset

# distributed
# use distributed computation or not
# if use, seed and gpu id will be rewritten according to the local rank
force_distributed: true #true
# Append the slurm job ID to the resume state filename if running a slurm job
# This is useful when you want to have things from a different job but same
# same checkpoint dir not resume.
preemption_append_slurm_job_id: false
# Save resume states only when running with slurm
# This is nice if you don't want debug jobs to resume
preemption_save_state_batch_only: false
# Number of gradient updates between saving the resume state
preemption_save_resume_state_interval: 100
# The PyTorch distributed backend to use
distrib_backend: GLOO
# default port
default_port: 8860 











