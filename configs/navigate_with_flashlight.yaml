# scene
single_scene: true # train on single scene or a scene dataset
scene_id: /home/meng/habitat-sim/data/scene_datasets/habitat-test-scenes/van-gogh-room.glb
#scene_id: /home/meng/habitat-sim/data/replica/configs/scenes/apt_0.scene_instance.json
#scene_id: /home/meng/habitat-sim/data/replica/stages/frl_apartment_stage.glb
#scene_id: /home/meng/habitat-sim/data/replica/stages/Stage_v3_sc0_staging.glb
#scene_id: /dataset/mp3d/17DRP5sb8fy/17DRP5sb8fy.glb


# dataset
dataset_type: PointNav-v1
split: train
#dataset_path: "data/datasets/pointnav/gibson/v1/{split}/{split}.json.gz"
dataset_path: /home/meng/habitat-sim/data/replica/replicaCAD.scene_dataset_config.json
content_scenes: ["*"]
scenes_dir: "data/scene_datasets/"

# experiments
experiment_name: "vangogh_daylight_fix_start_fix_goal_no_attention_loop_by_col"

# robot
agent_initial_position: [3, 0, 1] # [0, 0, 0]
agent_initial_rotation: [0, 70, 0] #[0, 90, 0]
forward_resolution: 0.25
rotate_resolution: 10

# observation space
color_sensor: true
depth_sensor: false
semantic_sensor: false
image_width: 224 # 256
image_height: 224 # 256
normalize_depth: false
min_depth: 0
max_depth: 1 #5.0
dictionary_observation_space: true

# task
dark_mode: false #true #false
flashlight_z: 0.2 #0.8 #0.2
measurements: ['steps', 'collisions', 'distance_to_goal', 'success', 'done', 'spl', 'softspl', 'point_goal_reward', 'return']


# goal
goal_conditioned: false
goal_format: pointgoal # imagegoal #pointgoal
goal_coord_system: polar  #  cartesian
goal_dimension: 2
goal_position: [4, 0, -1]
random_goal: false #true
random_start: false #true

# reward
success_distance: 0.2 # l2 distance in meter
success_reward: 2.5 
slack_reward: -1.0e-4
#distance_to: "point" #view_points

# episode termination condition
max_steps_per_episode: 400 #500
max_collisions_per_episode: 200

# neural network
visual_encoder: ResNet #ResNet # CNN 
pretrained_visual_encoder: false  
pretrained_whole_model: false
# path to the saved whole model or visual encoder only
pretrained_model_path: data/ddppo-models/gibson-2plus-resnet50.pth
# Whether or not the visual encoder backbone will be trained
train_encoder: true
rnn_type: gru #gru  # lstm
attention: false #false # true

# sampling
use_double_buffered_sampler: false
num_steps: 128  # rollout buffer length

# vector env
num_environments: 6

# training
torch_gpu_id: 0
simulator_gpu_id: 0
seed: 1
# train for how long: one of them must be -1
# num_updates: how many times agent.update is called, i.e. how many times the training process loops
# num of backprop inside each agent update = ppo_epoch * num_mini_batch
num_updates: -1 #1000
# total_num_steps: steps collected in all environments (num_environments)  
total_num_steps: 300000 #300000   # 75e6
# checkpoint
# only one of them can be used
num_checkpoints: 10 #100
checkpoint_interval: -1
checkpoint_folder: "checkpoints"  
# observation transformations
enabled_transforms: []

# training stats and log
verbose: true # false
log_interval: 25  # log stats every n training updates
reward_window_size: 50 # compute stats every n episodes
tensorboard_dir: "tensorboard"

# PPO
clip_param: 0.2 #0.6 # 0.3 no improve
kl_coef: 0
# ppo_epoch: # of training epoches inside each time agent update 
# num of backprop inside each agent update = ppo_epoch * num_mini_batch
ppo_epoch: 4
# batches per each epoch
# each batch include steps from num_environments / num_mini_batch rollouts
# each rollout include num_steps steps
# use one batch for each parameter update 
num_mini_batch: 2  
value_loss_coef: 0.5
entropy_coef: 0.01
lr: 2.5e-4 #2.5e-3 #1e-3 #2.5e-4
eps: 1.0e-5 #1e-5
max_grad_norm: 0.5
# visual encoder output size = rnn hidden size           
hidden_size: 512  
use_gae: true
gamma: 0.99
tau: 0.95 # 0.98 hurts
use_linear_clip_decay: true
use_linear_lr_decay: true
reward_window_size: 50
use_normalized_advantage: false

# evaluation
# save images and video to disk under video_path
eval_video_option: ["disk", "tensorboard"]
eval_checkpoint_folder: "checkpoints"
# if eval_checkpoint_file is an existing file in eval_checkpoint_folder, eval single checkpoint
# otherwise, eval all checkpoints in eval_checkpoint_folder
eval_checkpoint_file: "ckpt.9.pth"
# use checkpoint config file
eval_use_ckpt_config: false
video_dir: "video"

# Evaluate on all episodes
test_episode_count: 50 #-1: test on all episodes in dataset
eval_metrics: ['success', 'spl', 'softspl', 'return']


# distributed
# use distributed computation (DDPPO) or not
force_distributed: true
# Append the slurm job ID to the resume state filename if running a slurm job
# This is useful when you want to have things from a different job but same
# same checkpoint dir not resume.
preemption_append_slurm_job_id: false
# Save resume states only when running with slurm
# This is nice if you don't want debug jobs to resume
preemption_save_state_batch_only: false
# Number of gradient updates between saving the resume state
preemption_save_resume_state_interval: 100
# The PyTorch distributed backend to use
distrib_backend: GLOO
# for DDPPO
sync_frac: 0.6
# default port
default_port: 8738 #8738 # 8865














